#!/usr/bin/env python
# pylint: disable=unused-argument
# This program is dedicated to the public domain under the CC0 license.

"""
Simple Bot to reply to Telegram messages.

First, a few handler functions are defined. Then, those functions are passed to
the Application and registered at their respective places.
Then, the bot is started and runs until we press Ctrl-C on the command line.

Usage:
Basic Echobot example, repeats messages.
Press Ctrl-C on the command line or send a signal to the process to stop the
bot.
"""
# import gspread_asyncio
import asyncio
from concurrent.futures import ThreadPoolExecutor
import calendar
import time
from datetime import datetime, timedelta, time
import logging
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, Bot
from telegram.ext import Application, CallbackQueryHandler, CommandHandler, ContextTypes
import os


env_path = '.env'
# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ –∑–Ω–∞—á–µ–Ω–∏—è

send_messages_task = None

sendTryTime = 600*4
BigTimeLimit = [23,24]
ShortTimeLimit = [3,4]
# gif = open('gif.gif', 'rb')
agree_sticker_id = "CAACAgIAAxkBAAEKzbBlX1MfZJ6Dc4vZ-FX52TdIrpqePwACCREAAoHQiUufCV73RPDwKTME"
yoga_sticker_id = 'CAACAgIAAxkBAAEKzbdlX1Oj5EEa4YoLjhs5cJr8HSs5QAACbgAD5KDOByc3KCA4N217MwQ'
yoga_sticker_id_love = 'CAACAgIAAxkBAAEKzbllX1Ragq2eswe2NT_9NrrhP-4oNwACyQEAAhZCawpNVQGnEnEQ3jME'
yoga_sticker_id_by = 'CAACAgIAAxkBAAEKzbtlX1R84xZAptpCORxVlH1d4veXmgACWg8AAsFkiUtoBn1ASv7hiDME'


# –ß—Ç–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞ .env –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Ö –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
with open(env_path) as f:
    for line in f:
        key, value = line.strip().split('=', 1)
        os.environ[key] = value

group_id = os.getenv("GROUP_ID") 
GOOGLE_SHEETS_SPREADSHEET_ID = os.getenv("GOOGLE_SHEETS_SPREADSHEET_ID")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GOOGLE_SHEETS_API_CREDENTIALS_JSON = os.getenv("GOOGLE_SHEETS_API_CREDENTIALS_JSON")
bot = Bot(token=TELEGRAM_BOT_TOKEN)


events_schedule = {
    "Tuesday": {
        "üïê": time(17, 30),
        "üìç": "–°—Ç—É–¥–∏—è –ô–æ–≥–∏ –û–ô–ô–û, —É–ª. –•–æ–ª—å–∑—É–Ω–æ–≤–∞, 38/7",
        "üëº": "–ù–æ–≤–∏—á–∫–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è",
        "üßòüèª‚Äç‚ôÄÔ∏è": "–ø—Ä–∞–∫—Ç–∏–∫–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–∏"
    },
    "Thursday": {
        "üïê": time(17, 00),
        "üìç": "–¢–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ê–ù–î–≠–†, —É–ª. –ë–∞–∫—É–Ω–∏–Ω–∞, 2–ê (—ç—Ç–∞–∂ 1)",
        "üëº": "–ù–æ–≤–∏—á–∫–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è",
        "üßòüèª‚Äç‚ôÄÔ∏è": "–ü—Ä–∞–∫—Ç–∏–∫–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–∏"
    },
    "Friday": {
        "üïê": time(19, 0),
        "üìç": "–û—Ñ–∏—Å –≤–æ–∑–ª–µ –ì–∞–ª–µ—Ä–µ–∏ –ß–∏–∂–æ–≤–∞, —É–ª. –ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∞—è, 42 –æ—Ñ. 515",
        "üê£": "–ó–∞–Ω—è—Ç–∏—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏—Ö",
        "üßòüèª‚Äç‚ôÄÔ∏è": "–ü—Ä–∞–∫—Ç–∏–∫–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–∏, –º–µ—Ç–æ–¥–∏–∫–∏ –æ—á–∏—Å—Ç–∫–∏"
    },
    "Saturday": {
        "üïê": time(16, 0),
        "üìç": "–û—Ñ–∏—Å, —É–ª. 20-–ª–µ—Ç–∏—è –û–∫—Ç—è–±—Ä—è, 59 –æ—Ñ.317",
        "üëº": "16:00 - –ó–∞–Ω—è—Ç–∏—è –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤, 17:00 - –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏—Ö",
        "üßòüèª‚Äç‚ôÄÔ∏è": "–ü—Ä–∞–∫—Ç–∏–∫–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–∏"
    }

}


current_datetime = datetime.now()
day_of_week_index = current_datetime.weekday()
# day_of_week_index = 1
day_indices = [list(calendar.day_name).index(day.capitalize()) for day in events_schedule]


def find_nearest_day(current_day_index, schedule_indices):

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    current_day_index %= 7  # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –ø—Ä–µ–≤—ã—à–∞–µ—Ç 6, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É –Ω–µ–¥–µ–ª–∏
    current_date = datetime.now()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª—å
    day_names = [
        "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥—É", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü—É", "—Å—É–±–±–æ—Ç—É", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    ]

    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
    nearest_day_index = min(schedule_indices, key=lambda day_index: (day_index - current_day_index) % 7)

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–ª–∏–∂–∞–π—à–µ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ 
    nearest_day_name = list(calendar.day_name)[nearest_day_index]

    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
    event_time = events_schedule[nearest_day_name]["üïê"]

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å –≤—Ä–µ–º–µ–Ω–µ–º —Å–æ–±—ã—Ç–∏—è
    if current_datetime.time() > event_time:
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è, –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
        nearest_day_index = min(schedule_indices, key=lambda day_index: (day_index - (current_day_index+1)) % 7)
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ 
        nearest_day_name = list(calendar.day_name)[nearest_day_index]
        event_time = events_schedule[nearest_day_name]["üïê"]    

    # Calculate the difference in days to the nearest given day
    days_difference = (nearest_day_index - current_day_index + 7) % 7
    # Calculate the date of the nearest given day
    nearest_day_date = current_date + timedelta(days=days_difference)

        # Calculate the remaining time until the nearest day
    remaining_time = (datetime.combine(nearest_day_date, event_time) - datetime.now()).total_seconds()
    hours, remainder = divmod(remaining_time, 3600)
    minutes, _ = divmod(remainder, 60)

    # Format the result as hours and minutes
    remaining_time_str = f"{int(hours)} hours and {int(minutes)} minutes"

    # print('–≤—Ä–µ–º—è –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',hours)

    nearest_day_name_rus = day_names[nearest_day_index]
    formatted_string = "\n".join([f"{key}: {value}" for key, value in events_schedule[nearest_day_name].items()])

    dayEvent = {nearest_day_name_rus:formatted_string}
    dayEvent_str = "\n".join([f"{key}: {value}" for key, value in dayEvent.items()])

    return hours,minutes,nearest_day_name,dayEvent_str


# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
# set higher logging level for httpx to avoid all GET and POST requests being logged
logging.getLogger("httpx").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)


keyboard = [
    [
        InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="yes")
    ]
]

keyboard2 = [
    [
        InlineKeyboardButton("–°–æ–±–∏—Ä–∞—é—Å—å –ø–æ–π—Ç–∏", callback_data="try"),
        InlineKeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="otpis"),
    ]
]

keyboard3 = [
    [
        InlineKeyboardButton("–¢–æ—á–Ω–æ –ø–æ–π–¥—É", callback_data="confirm"),
        InlineKeyboardButton("–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è", callback_data="sorry"),
    ],
    [
        InlineKeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="otpis"),
    ]
]

# Define a few command handlers. These usually take the two arguments update and
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Sends a message with three inline buttons attached."""

    user_ids,filtered_users = await get_telegram_user_ids()
    curent_user_id = update.message.chat_id  # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ –æ–±—ä–µ–∫—Ç–∞ update

    if str(curent_user_id) in user_ids:
        reply_markup = InlineKeyboardMarkup(keyboard2)
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –°–∞—Ö–∞–¥–∂ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –í–æ—Ä–æ–Ω–µ–∂–µ, —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è?", reply_markup=reply_markup)
    else:
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –•–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –°–∞—Ö–∞–¥–∂ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –í–æ—Ä–æ–Ω–µ–∂–µ?", reply_markup=reply_markup)
    

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Parses the CallbackQuery and updates the message text."""
    query = update.callback_query
    user_id = query.from_user.id
    user_ids,filtered_users = await get_telegram_user_ids()
    user_name = query.from_user.username
    choice = query.data


    # CallbackQueries need to be answered, even if no notification to the user is needed
    await query.answer()
    hours,minutes,eng_day,nearest_day = find_nearest_day(day_of_week_index, day_indices)
    adress_line=nearest_day.split('\n')[1]
    
    if  hours < ShortTimeLimit[1]:
        reply_markup = InlineKeyboardMarkup(keyboard3)
    if  hours > ShortTimeLimit[1]:
        reply_markup = InlineKeyboardMarkup(keyboard2)

    # –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google –¢–∞–±–ª–∏—Ü—É
    if choice == "yes":
        if str(user_id) in user_ids:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º, –±–ª–∏–∂–∞–π—à–µ–µ –ø—Ä–æ–π–¥–µ—Ç –≤ \n üóì {nearest_day} —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç",reply_markup=reply_markup
            )
        else:
            await update_spreadsheet(user_id, user_name,  GOOGLE_SHEETS_SPREADSHEET_ID, choice==False, confirmation=False ,typeOf=True)
            await update_spreadsheet_data(context.application)    
            await context.bot.send_message(
                chat_id=user_id,
                text=f"–ó–¥–æ—Ä–æ–≤–æ! –ë–ª–∏–∂–∞–π—à–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø—Ä–æ–π–¥–µ—Ç –≤ \n üóì {nearest_day} —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç" ,reply_markup=reply_markup
            )
            await context.bot.send_sticker(chat_id=user_id, sticker=agree_sticker_id )


    if choice == "otpis":
        await update_spreadsheet(user_id, user_name, GOOGLE_SHEETS_SPREADSHEET_ID, choice=False, confirmation=False, typeOf=False)
        await update_spreadsheet_data(context.application)    
        await context.bot.send_message(
            chat_id=user_id,
            text=f"–ú—ã –≤–∞—Å —É–¥–∞–ª–∏–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=InlineKeyboardMarkup(keyboard)
        )
        await context.bot.send_sticker(chat_id=user_id, sticker=yoga_sticker_id_by)
    
    if choice == "try":
        await update_spreadsheet(user_id, user_name,  GOOGLE_SHEETS_SPREADSHEET_ID, choice=True, confirmation=False, typeOf=False)
        await update_spreadsheet(user_id, user_name,  GOOGLE_SHEETS_SPREADSHEET_ID, choice=True, confirmation=False, typeOf=True)
        await update_spreadsheet_data(context.application)    
        await context.bot.send_message(
            chat_id=user_id,
            text=f"–ó–¥–æ—Ä–æ–≤–æ! –ë—É–¥–µ–º –∂–¥–∞—Ç—å. –ë–ª–∏–∂–∞–π—à–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø—Ä–æ–π–¥–µ—Ç –≤ \n üóì {nearest_day} —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç. –û—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 4 —á–∞—Å–∞ –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
        )
        await send_notifications_to_group_try(user_name)
        await context.bot.send_sticker(chat_id=user_id, sticker=yoga_sticker_id_love)
    
    if choice == "confirm":

        await update_spreadsheet(user_id, user_name,  GOOGLE_SHEETS_SPREADSHEET_ID, choice=True, confirmation=False, typeOf=False)
        await update_spreadsheet(user_id, user_name,  GOOGLE_SHEETS_SPREADSHEET_ID, choice=True, confirmation=True, typeOf=True)
        await update_spreadsheet_data(context.application)    
        await context.bot.send_message(
            chat_id=user_id,
            text=f"–í–∞—à–∞ –ö—É–Ω–¥–∞–ª–∏–Ω–∏ –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è, –º—ã –í–∞—Å –∂–¥–µ–º —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç –ø–æ –∞–¥—Ä–µ—Å—É {adress_line}!",
        )

        await send_notifications_to_group_confirm(user_name)
        await context.bot.send_sticker(chat_id=user_id, sticker=yoga_sticker_id)

    if choice == "sorry":
        await update_spreadsheet(user_id, user_name,  GOOGLE_SHEETS_SPREADSHEET_ID, choice=True, confirmation=False, typeOf=False)
        await update_spreadsheet(user_id, user_name,  GOOGLE_SHEETS_SPREADSHEET_ID, choice=False, confirmation=False, typeOf=True)
        await update_spreadsheet_data(context.application)    
        await context.bot.send_message(
            chat_id=user_id,
            text=f"–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ, –º—ã –í–∞—Å –æ–ø–æ–≤–µ—Å—Ç–∏–º –æ –Ω–µ–º –∑–∞—Ä–∞–Ω–µ–µ!"
        )
        await send_notifications_to_group_sorry(user_name)



async def send_notifications_to_group_try(user_name):
    hours,minutes,eng_day,nearest_day = find_nearest_day(day_of_week_index, day_indices)
    text_line=nearest_day.split('\n')[0]
    await bot.send_message(group_id, f"\n –ù–∞ {text_line} \n –µ—Å—Ç—å –ø–µ—Ä–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –æ—Ç {user_name}")

async def send_notifications_to_group_confirm(user_name):
    hours,minutes,eng_day,nearest_day = find_nearest_day(day_of_week_index, day_indices)
    text_line=nearest_day.split('\n')[0]
    await bot.send_message(group_id, f"\n –ù–∞ {text_line} \n –µ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –æ—Ç {user_name}")

async def send_notifications_to_group_sorry(user_name):
    hours,minutes,eng_day,nearest_day = find_nearest_day(day_of_week_index, day_indices)
    text_line=nearest_day.split('\n')[0]
    await bot.send_message(group_id, f"\n –ù–∞ {text_line} \n {user_name} –Ω–µ —Å–º–æ–∂–µ—Ç –ø—Ä–∏–¥—Ç–∏")


async def update_spreadsheet_data(application):
    # global send_messages_task
    await get_telegram_user_ids()


# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
async def update_spreadsheet(user_id, user_name,  GOOGLE_SHEETS_SPREADSHEET_ID, choice, confirmation, typeOf):
    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Google Sheets
    scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
    credentials = ServiceAccountCredentials.from_json_keyfile_name(GOOGLE_SHEETS_API_CREDENTIALS_JSON, scope)
    gc = gspread.authorize(credentials)
    spreadsheet = gc.open_by_key(GOOGLE_SHEETS_SPREADSHEET_ID)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ (–ø–µ—Ä–≤–æ–≥–æ –ª–∏—Å—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ)
    sheet = spreadsheet.get_worksheet(0)
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –í—ã–±–∏—Ä–∞–µ–º –ª–∏—Å—Ç —Ç–∞–±–ª–∏—Ü—ã
    row_data = [user_id, user_name, choice, confirmation, timestamp]

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if typeOf:
        sheet.append_row(row_data)
    else:
        cell = sheet.find(str(user_id))
        sheet.delete_row(cell.row)




# –ü–æ–ª—É—á–∞–µ–º —Å–æ–≥–ª–∞—Å–∏–≤—à–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
async def get_telegram_user_ids():
    # –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

    scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
    credentials = ServiceAccountCredentials.from_json_keyfile_name(GOOGLE_SHEETS_API_CREDENTIALS_JSON, scope)
    gc = gspread.authorize(credentials)
    spreadsheet = gc.open_by_key(GOOGLE_SHEETS_SPREADSHEET_ID)

    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
    gc = gspread.authorize(credentials)
    spreadsheet = gc.open_by_key(GOOGLE_SHEETS_SPREADSHEET_ID)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ (–ø–µ—Ä–≤–æ–≥–æ –ª–∏—Å—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ)
    sheet = spreadsheet.get_worksheet(0)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_ids = await asyncio.to_thread(sheet.col_values, 1)
    user_agrees = await asyncio.to_thread(sheet.col_values, 3)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, —É –∫–æ–≥–æ 3-–∏–π —Å—Ç–æ–ª–±–µ—Ü —Ä–∞–≤–µ–Ω True
    filtered_users = [user_id for user_id, agrees in zip(user_ids, user_agrees) if agrees.lower() == 'true']

    print("–ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã" ,user_ids)
    print("–ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—Ç–æ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –ø—Ä–∏–¥—Ç–∏", filtered_users)
    return user_ids,filtered_users


async def send_messages_to_users():
    hours, minutes, eng_day, nearest_day = find_nearest_day(day_of_week_index, day_indices)
    reply_markup = InlineKeyboardMarkup(keyboard2)
    print('–±–ª–∏–∂–∞–π—à–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ-',eng_day)
    print('–≤—Ä–µ–º—è –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —Å–æ–±–∏—Ä–∞—é—â–∏—Ö—Å—è-',hours)

    try:
        # Check if the message has already been sent
        if BigTimeLimit[0] <= hours < BigTimeLimit[1]:
            user_ids,filtered_users = await get_telegram_user_ids()
            print('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è',user_ids)
            for user_id in user_ids:
                # Send the reminder message
                await bot.send_message(user_id, f"\n –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ {nearest_day}. \n –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤ –∏ {minutes} –º–∏–Ω—É—Ç", reply_markup=reply_markup)
                print(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")



async def send_reminder_to_users():
    hours, minutes, eng_day, nearest_day = find_nearest_day(day_of_week_index, day_indices)
    reply_markup = InlineKeyboardMarkup(keyboard3)
    print('–±–ª–∏–∂–∞–π—à–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —Å–æ–±–∏—Ä–∞—é—â–∏—Ö—Å—è-',eng_day)
    print('–≤—Ä–µ–º—è –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω—ã—Ö-',hours)

    try:
         if ShortTimeLimit[0] <= hours < ShortTimeLimit[1]:
            user_ids,filtered_users = await get_telegram_user_ids()
            print('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è',user_ids)
            for user_id in user_ids:
                # Send the reminder message
                await bot.send_message(user_id, f"\n –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ {nearest_day}. \n –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤ –∏ {minutes} –º–∏–Ω—É—Ç", reply_markup=reply_markup)
                print(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")



async def cleanup(application, send_messages_task):
    application.stop()
    send_messages_task.cancel()
    await asyncio.gather(
        application.run_until_complete(application.shutdown()),
        send_messages_task
    )

async def main_task():
    while True:
        # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º asyncio.ensure_future
        asyncio.ensure_future(send_messages_to_users())
        asyncio.ensure_future(send_reminder_to_users())
        await asyncio.sleep(sendTryTime)


def main() -> None:
    # global send_messages_task
    """Run the bot."""
    # Create the Application and pass it your bot's token.

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))

    
    # Create a new event loop
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É main_task —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏
    main_task_task = loop.create_task(main_task())

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Å–æ–∑–¥–∞–Ω–Ω–æ–º —Ü–∏–∫–ª–µ
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except KeyboardInterrupt:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
        loop.run_until_complete(cleanup(application, main_task_task))


if __name__ == "__main__":
    main()