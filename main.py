#!/usr/bin/env python
# pylint: disable=unused-argument
# This program is dedicated to the public domain under the CC0 license.

"""
Simple Bot to reply to Telegram messages.

First, a few handler functions are defined. Then, those functions are passed to
the Application and registered at their respective places.
Then, the bot is started and runs until we press Ctrl-C on the command line.

Usage:
Basic Echobot example, repeats messages.
Press Ctrl-C on the command line or send a signal to the process to stop the
bot.
"""
# import gspread_asyncio
import asyncio
from concurrent.futures import ThreadPoolExecutor
import calendar
import time
from datetime import datetime, timedelta, time
import logging
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, Bot
from telegram.ext import Application, CallbackQueryHandler, CommandHandler, ContextTypes
import os
import json


env_path = '.env'
# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ –∑–Ω–∞—á–µ–Ω–∏—è

send_messages_task = None

sendTryTime = 600*6
BigTimeLimit = [23,24]
ShortTimeLimit = [3,4]
# gif = open('gif.gif', 'rb')
agree_sticker_id = "CAACAgIAAxkBAAEKzbBlX1MfZJ6Dc4vZ-FX52TdIrpqePwACCREAAoHQiUufCV73RPDwKTME"
yoga_sticker_id = 'CAACAgIAAxkBAAEKzbdlX1Oj5EEa4YoLjhs5cJr8HSs5QAACbgAD5KDOByc3KCA4N217MwQ'
yoga_sticker_id_love = 'CAACAgIAAxkBAAEKzbllX1Ragq2eswe2NT_9NrrhP-4oNwACyQEAAhZCawpNVQGnEnEQ3jME'
yoga_sticker_id_by = 'CAACAgIAAxkBAAEKzbtlX1R84xZAptpCORxVlH1d4veXmgACWg8AAsFkiUtoBn1ASv7hiDME'


# –ß—Ç–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞ .env –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Ö –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
with open(env_path) as f:
    for line in f:
        key, value = line.strip().split('=', 1)
        os.environ[key] = value

group_id = os.getenv("GROUP_ID") 
GOOGLE_SHEETS_SPREADSHEET_ID = os.getenv("GOOGLE_SHEETS_SPREADSHEET_ID")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GOOGLE_SHEETS_API_CREDENTIALS_JSON = os.getenv("GOOGLE_SHEETS_API_CREDENTIALS_JSON")
bot = Bot(token=TELEGRAM_BOT_TOKEN)

events_schedule = {
    "Tuesday": {
        "–ó–∞–Ω—è—Ç–∏–µ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤": {
        "üïê": time(17, 30),
        "üìç": "–°—Ç—É–¥–∏—è –ô–æ–≥–∏ –û–ô–ô–û, —É–ª. –•–æ–ª—å–∑—É–Ω–æ–≤–∞, 38/7\n https://yandex.ru/maps/-/CDe-bHYN",
        "üßòüèª‚Äç‚ôÄÔ∏è": "–ü—Ä–∞–∫—Ç–∏–∫–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–∏"
        }
    },

    "Thursday": {
        "–ó–∞–Ω—è—Ç–∏–µ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤": {
        "üïê": time(17, 00),
        "üìç": "–¢–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ê–ù–î–≠–†, —É–ª. –ë–∞–∫—É–Ω–∏–Ω–∞, 2–ê, 2-–π —ç—Ç–∞–∂ \n https://yandex.ru/maps/-/CDe-bL~J",
        "üßòüèª‚Äç‚ôÄÔ∏è": "–ü—Ä–∞–∫—Ç–∏–∫–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–∏"
        }
    },

    "Friday": {
        "–ó–∞–Ω—è—Ç–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏—Ö": {
        "üïê": time(19, 0),
        "üìç": "–û—Ñ–∏—Å –≤–æ–∑–ª–µ –ì–∞–ª–µ—Ä–µ–∏ –ß–∏–∂–æ–≤–∞, —É–ª. –ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∞—è, 42, 5-–π —ç—Ç–∞–∂ –æ—Ñ. 515 \n https://yandex.ru/maps/-/CDe-bTjS",
        "üßòüèª‚Äç‚ôÄÔ∏è": "–ü—Ä–∞–∫—Ç–∏–∫–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–∏, –º–µ—Ç–æ–¥–∏–∫–∏ –æ—á–∏—Å—Ç–∫–∏",
        }
    },

    "Saturday": {
        "–ó–∞–Ω—è—Ç–∏–µ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤": {
        "üïê": time(16, 00),
        "üìç": "–û—Ñ–∏—Å, —É–ª. 20-–ª–µ—Ç–∏—è –û–∫—Ç—è–±—Ä—è, 59 –æ—Ñ.317, 3-–π —ç—Ç–∞–∂ \n https://yandex.ru/maps/-/CDe-b2ij",
        "üßòüèª‚Äç‚ôÄÔ∏è": "–ü—Ä–∞–∫—Ç–∏–∫–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–∏"
        },
        "–ó–∞–Ω—è—Ç–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏—Ö": {
        "üïê": time(17, 00),
        "üìç": "–û—Ñ–∏—Å, —É–ª. 20-–ª–µ—Ç–∏—è –û–∫—Ç—è–±—Ä—è, 59 –æ—Ñ.317, 3-–π —ç—Ç–∞–∂ \n https://yandex.ru/maps/-/CDe-b2ij",
        "üßòüèª‚Äç‚ôÄÔ∏è": "–ü—Ä–∞–∫—Ç–∏–∫–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–∏, –º–µ—Ç–æ–¥–∏–∫–∏ –æ—á–∏—Å—Ç–∫–∏",
        }

    }

}


def filter_calendar(calendar, filter_strings):

    filter_strings_list = filter_strings.split(';')
    filter_strings_list = [item for item in filter_strings_list if item.strip()]
    # print('filter_strings_list',filter_strings_list)
    filtered_events = {}

    for filter_string in filter_strings_list:
        day, event_name = filter_string.split(":")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–Ω—è –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
        if day in calendar and event_name in calendar[day]:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
            filtered_events.setdefault(day, {})[event_name] = calendar[day][event_name]

    return filtered_events


def translate_days_to_russian(english_day):
    days_translation = {
        'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
        'Wednesday': '–°—Ä–µ–¥–∞',
        'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
        'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
        'Saturday': '–°—É–±–±–æ—Ç–∞',
        'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }

    return days_translation.get(english_day, english_day)


def get_day_index(day_name):
    days_of_week = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]

    try:
        day_index = days_of_week.index(day_name)
        return day_index
    except ValueError:
        print(f"–û—à–∏–±–∫–∞: {day_name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–Ω—ë–º –Ω–µ–¥–µ–ª–∏.")
        return None



async def time_until_event():
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    current_time = datetime.now()
    # day_of_week_index = current_time.weekday()
    # –†–∞—Å—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    for day, events in events_schedule.items():
        for event_name, event_info in events.items():
            event_time = event_info.get("üïê")
            event_geo = "üìç "+ event_info.get("üìç")
            event_opis = "üßòüèª‚Äç‚ôÄÔ∏è "+ event_info.get("üßòüèª‚Äç‚ôÄÔ∏è")
            event_day = "üóì " + translate_days_to_russian(day) + " üïê"+ str(event_time)
            event_title ="üöÄ "+ event_name
            event_shelude = day + ":"+ event_name
            event_text=event_day + '\n'+ event_title + '\n' + event_geo + '\n' + event_opis

            # –í—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            event_datetime = datetime.combine((current_time + timedelta(days=(get_day_index(day) - current_time.weekday() + 7) % 7)).date(), event_time)
            # print('–≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',type(event_datetime))
            # –†–∞—Å—Å—á–µ—Ç —Ä–∞–∑–Ω–∏—Ü—ã –≤–æ –≤—Ä–µ–º–µ–Ω–∏
            time_difference = (event_datetime - current_time).total_seconds() / 3600
            # print('—Å–µ–π—á–∞—Å-',current_time, '-time_difference',time_difference )
            # print('—Å–æ–±—ã—Ç–∏–µ\n',day,'\n',event_name,'\n',event_info)


            if time_difference //1 == BigTimeLimit[1]:
                await send_messages_to_users(event_text,event_shelude)
            if time_difference //1 == ShortTimeLimit[1]:
                await send_reminder_to_users(event_text)

    # print('–±–ª–∏–∂–∞–π—à–∞—è –¥–µ–ª—å—Ç–∞',nearest_time_delta,'–±–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å',near_day,'–±–ª–∏–∂–∞–π—à–µ–µ –∑–∞–Ω—è—Ç–∏–µ',near_title)
    return event_day



# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
# set higher logging level for httpx to avoid all GET and POST requests being logged
logging.getLogger("httpx").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)



keyboard_start = [
[
        InlineKeyboardButton("üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π", callback_data="shelude")
    ]
]

keyboard_start_old = [

        [
        InlineKeyboardButton("‚≠êÔ∏è –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="my_shelude"),
        InlineKeyboardButton("üóì –û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="shelude")
         ]

]

keyboard22 = [
    [
        InlineKeyboardButton("–°–æ–±–∏—Ä–∞—é—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ", callback_data="try")

    ],
        keyboard_start_old[0]
]

keyboard3 = [
    [
        InlineKeyboardButton("–¢–æ—á–Ω–æ –ø–æ–π–¥—É", callback_data="confirm"),
        InlineKeyboardButton("–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è", callback_data="sorry"),
    ],
        keyboard_start_old[0]
]


# Define a few command handlers. These usually take the two arguments update and
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Sends a message with three inline buttons attached."""

    user_ids,filtered_users = await get_telegram_user_ids()
    curent_user_id = update.message.chat_id  # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ –æ–±—ä–µ–∫—Ç–∞ update
    user_name = update.message.from_user.username

    if str(curent_user_id) in user_ids:
        reply_markup = InlineKeyboardMarkup(keyboard_start_old)
        await update.message.reply_text(f'–ü—Ä–∏–≤–µ—Ç! {user_name} –ü—É—Å—Ç—å –í–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –≤—ã—Å–æ–∫–æ!', reply_markup=reply_markup)
    else:
        reply_markup = InlineKeyboardMarkup(keyboard_start)
        await update.message.reply_text('''–ü—Ä–∏–≤–µ—Ç! –º—ã –°–∞—Ö–∞–¥–∂–∞ –ô–æ–≥–∏ –≥–æ—Ä–æ–¥–∞ –í–æ—Ä–æ–Ω–µ–∂ —Å–¥–µ–ª–∞–ª–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–Ω–∏—Ç—å –≤—Å–µ–º –∂–µ–ª–∞—é—â–∏–º –≥–¥–µ –∏ –∫–æ–≥–¥–∞ –ø—Ä–æ—Ö–æ–¥—è—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ –°–∞—Ö–∞–¥–∂-–º–µ–¥–∏—Ç–∞—Ü–∏–∏. 

–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞ —É–¥–æ–±–Ω—ã–µ –¥–ª—è –≤–∞—Å –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è üëá, –∏ –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞ –¥–æ –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏–π –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏, —á—Ç–æ–±—ã –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏.''', reply_markup=reply_markup)



def format_events_schedule(events_schedule,Subscribe=True):
    messages_with_keyboard = []

    for day, events in events_schedule.items():
        for event_name, event_details in events.items():
            message = f"{translate_days_to_russian(day)} - {event_name}:\n"

            # –®–∏—Ä–∏–Ω–∞ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
            column_width = 0

            for key, value in event_details.items():
                if isinstance(value, time):
                    formatted_time = value.strftime("%H:%M")
                    message += f"{key.ljust(column_width)}: {formatted_time}\n"
                else:
                    message += f"{key.ljust(column_width)}: {value}\n"

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
            if Subscribe==True:
                button_text = "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ " + translate_days_to_russian(day) + 'üîî'
                buttons = [InlineKeyboardButton(button_text, callback_data=f"{day+event_name}")]
                keyboard = [buttons]
            else:
                button_text = "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç " + translate_days_to_russian(day) + ' üîï'
                button_row1 = [InlineKeyboardButton(button_text, callback_data=f"otpis_{day+event_name}")]
                button_row2 = keyboard_start_old[0]
                buttons = [button_row1,button_row2]
                keyboard = buttons

            
            

            messages_with_keyboard.append((message, InlineKeyboardMarkup(keyboard)))

    return messages_with_keyboard


async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:

    user_shelude={}
    """Parses the CallbackQuery and updates the message text."""
    query = update.callback_query
    user_id = query.from_user.id
    # user_ids,users_shelude_strings = await get_telegram_user_ids()
    user_name = query.from_user.username
    choice = query.data
    # CallbackQueries need to be answered, even if no notification to the user is needed
    await query.answer()

    #–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for day, events in events_schedule.items():
        for event_name,event_details in events.items():
            if choice == f"{day+event_name}":
                # user_shelude[day] = event_name
                user_shelude = day+":"+event_name+';'
                # print('–¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',user_shelude)
                await update_spreadsheet(user_id, user_name,  GOOGLE_SHEETS_SPREADSHEET_ID, user_shelude,add=True)
                await context.bot.send_message(
                chat_id=user_id,
                text=f'–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {event_name} –≤ {translate_days_to_russian(day)}. –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞–∫–∞–Ω—É–Ω–µ, —á—Ç–æ–±—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.', reply_markup=InlineKeyboardMarkup(keyboard_start_old) 
            )

    #–û—Ç–ø–∏—Å–∫–∞ –æ—Ç –¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è       
    for day, events in events_schedule.items():
        for event_name,event_details in events.items():
            if choice == f"otpis_{day+event_name}":
                # user_shelude[day] = event_name
                user_shelude = day+":"+event_name
                # print('–¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',user_shelude)
                await update_spreadsheet(user_id, user_name,  GOOGLE_SHEETS_SPREADSHEET_ID, user_shelude,add=False)
                await context.bot.send_message(
                chat_id=user_id,
                text=f'–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {event_name} –≤ {translate_days_to_russian(day)}. –¢–µ–ø–µ—Ä—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤–∞–º.', reply_markup=InlineKeyboardMarkup(keyboard_start_old) 
            )

    if choice == 'my_shelude':
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        user_shelude_string = await get_user_sheluds(user_id)
        user_schedule = filter_calendar(events_schedule,user_shelude_string)
        # print('—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',user_shelude_string)
        if user_shelude_string:
            messages_with_keyboard = format_events_schedule(user_schedule,Subscribe=False)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            for message, reply_markup in messages_with_keyboard:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=message,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
        else:
            print('—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—É—Å—Ç–æ–µ',user_shelude_string)
            await context.bot.send_message(
            chat_id=user_id,
            text=f"–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞–º –¥–µ–Ω—å –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.",
            reply_markup=InlineKeyboardMarkup(keyboard_start)
        )

    
    if choice == "try":
        await context.bot.send_message(
            chat_id=user_id,
            text=f"–ó–¥–æ—Ä–æ–≤–æ! –ë—É–¥–µ–º –∂–¥–∞—Ç—å –≤–∞—Å –∑–∞–≤—Ç—Ä–∞  –û—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ {ShortTimeLimit[1]} —á–∞—Å–∞ –¥–æ –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏–π"
        )
        await send_notifications_to_group_try(user_name)
        await context.bot.send_sticker(chat_id=user_id, sticker=yoga_sticker_id_love)
    
    if choice == "confirm": 
        await context.bot.send_message(
            chat_id=user_id,
            text=f"–í–∞—à–∞ –ö—É–Ω–¥–∞–ª–∏–Ω–∏ –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è, —É–≤–∏–¥–∏–º—Å—è —á–µ—Ä–µ–∑ üïê{time} —á–∞—Å–∞",
        )
        await send_notifications_to_group_confirm(user_name)
        await context.bot.send_sticker(chat_id=user_id, sticker=yoga_sticker_id)

    if choice == "sorry":
        await update_spreadsheet(user_id, user_name,  GOOGLE_SHEETS_SPREADSHEET_ID, choice=True, confirmation=False, typeOf=False)
        await update_spreadsheet(user_id, user_name,  GOOGLE_SHEETS_SPREADSHEET_ID, choice=False, confirmation=False, typeOf=True)
        await update_spreadsheet_data(context.application)    
        await context.bot.send_message(
            chat_id=user_id,
            text=f"–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ, –º—ã –í–∞—Å –æ–ø–æ–≤–µ—Å—Ç–∏–º –æ –Ω–µ–º –∑–∞—Ä–∞–Ω–µ–µ!"
        )
        await send_notifications_to_group_sorry(user_name)

    if choice == "shelude":
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
            messages_with_keyboard = format_events_schedule(events_schedule,Subscribe=True)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            for message, reply_markup in messages_with_keyboard:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=message,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )

    




async def send_notifications_to_group_try(user_name):
    await bot.send_message(group_id, f"\n –ù–∞ –∑–∞–≤—Ç—Ä–∞ –µ—Å—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –æ—Ç {user_name}")

async def send_notifications_to_group_confirm(user_name):
    await bot.send_message(group_id, f"\n –°–µ–≥–æ–¥–Ω—è –µ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –æ—Ç {user_name}")

async def send_notifications_to_group_sorry(user_name):
    await bot.send_message(group_id, f"\n {user_name} —Å–µ–≥–æ–¥–Ω—è –Ω–µ —Å–º–æ–∂–µ—Ç –ø—Ä–∏–¥—Ç–∏")


async def update_spreadsheet_data(application):
    # global send_messages_task
    await get_telegram_user_ids()


# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –≤—ã–±–æ—Ä –≤ —Ç–∞–±–ª–∏—Ü—É
async def update_spreadsheet(user_id, user_name,  GOOGLE_SHEETS_SPREADSHEET_ID, user_shelude,add=True):
    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Google Sheets
    scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
    credentials = ServiceAccountCredentials.from_json_keyfile_name(GOOGLE_SHEETS_API_CREDENTIALS_JSON, scope)
    gc = gspread.authorize(credentials)
    spreadsheet = gc.open_by_key(GOOGLE_SHEETS_SPREADSHEET_ID)
    user_ids,user_sheludes =  await get_telegram_user_ids()
    sheet = spreadsheet.get_worksheet(0)
    # timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    all_data = sheet.get_all_values()
    user_exists = any(str(user_id) == user for user in user_ids)

    if user_exists:
        # print('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å',user_exists)
        for index, entry in enumerate(all_data):
            if entry[0] == str(user_id):
                if add:
                    if user_shelude in entry[2]:
                        pass
                    else:
                        entry[2] += user_shelude
                        sheet.update(f'A{index + 1}:C{index + 1}', [entry], value_input_option='USER_ENTERED')
                else:
                    if user_shelude in entry[2]:
                        entry[2] = entry[2].replace(user_shelude+';', '')
                        sheet.update(f'A{index + 1}:C{index + 1}', [entry], value_input_option='USER_ENTERED')
                    else:
                        pass                            
                
                break  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ü–∏–∫–ª –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    else:
        # print('—Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç')
        sheet.append_row([user_id, user_name, user_shelude])
    



# –ü–æ–ª—É—á–∞–µ–º —Å–æ–≥–ª–∞—Å–∏–≤—à–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
async def get_telegram_user_ids():
    # –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

    scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
    credentials = ServiceAccountCredentials.from_json_keyfile_name(GOOGLE_SHEETS_API_CREDENTIALS_JSON, scope)
    gc = gspread.authorize(credentials)
    spreadsheet = gc.open_by_key(GOOGLE_SHEETS_SPREADSHEET_ID)

    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
    gc = gspread.authorize(credentials)
    spreadsheet = gc.open_by_key(GOOGLE_SHEETS_SPREADSHEET_ID)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ (–ø–µ—Ä–≤–æ–≥–æ –ª–∏—Å—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ)
    sheet = spreadsheet.get_worksheet(0)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_ids = await asyncio.to_thread(sheet.col_values, 1)
    user_sheludes = await asyncio.to_thread(sheet.col_values, 3)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, —É –∫–æ–≥–æ 3-–∏–π —Å—Ç–æ–ª–±–µ—Ü —Ä–∞–≤–µ–Ω True
    # filtered_users = [user_id for user_id, agrees in zip(user_ids, user_agrees) if agrees.lower() == 'true']

    return user_ids,user_sheludes


# –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–≤–æ–∞—Ç–µ–ª—è
async def get_user_sheluds(user_id):
    user_shelude =''
    scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
    credentials = ServiceAccountCredentials.from_json_keyfile_name(GOOGLE_SHEETS_API_CREDENTIALS_JSON, scope)
    gc = gspread.authorize(credentials)
    spreadsheet = gc.open_by_key(GOOGLE_SHEETS_SPREADSHEET_ID)

    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
    gc = gspread.authorize(credentials)
    spreadsheet = gc.open_by_key(GOOGLE_SHEETS_SPREADSHEET_ID)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ (–ø–µ—Ä–≤–æ–≥–æ –ª–∏—Å—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ)
    sheet = spreadsheet.get_worksheet(0)
    all_data = sheet.get_all_values()

    for entry in all_data:
        if entry[0] == str(user_id):
            user_shelude = entry[2]
            # print('–Ω–µ –ø—É—Å—Ç–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ',user_shelude)
        else: 
            # print('–ø—É—Å—Ç–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
            user_shelude +=''

    return user_shelude


async def send_messages_to_users(event_text,event_shelude):
    # hours, minutes, eng_day, nearest_day = find_nearest_day(day_of_week_index)
    reply_markup = InlineKeyboardMarkup(keyboard22)

    try:
        user_ids,user_shelude_string = await get_telegram_user_ids()
        user_schedule_dict = dict(zip(user_ids, user_shelude_string))

        user_ids_filtred = [user_id for user_id, schedule in user_schedule_dict.items() if event_shelude in schedule]

        print('–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–µ–∏ –∑–∞ 24 —á–∞—Å–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',user_ids_filtred)

        for user_id in user_ids_filtred:
            # Send the reminder message
            await bot.send_message(user_id, f"\n –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: \n {event_text} \n‚ö†Ô∏è –ï—Å–ª–∏ –≤—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø—Ä–∏–¥—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É - –ü–æ–π–¥—É –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ üëá ", reply_markup=reply_markup)
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")



async def send_reminder_to_users(event_text):
    reply_markup = InlineKeyboardMarkup(keyboard3)

    try:
        user_ids,filtered_users = await get_telegram_user_ids()
        print('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 4 —á–∞—Å–∞')
        for user_id in user_ids:
            # Send the reminder message
            await bot.send_message(user_id, f"\n –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —Å–µ–≥–æ–¥–Ω—è, —á–µ—Ä–µ–∑ {ShortTimeLimit[1]} —á–∞—Å–∞ –Ω–∞—á–Ω—É—Ç—å—Å—è –∑–∞–Ω—è—Ç–∏—è \n {event_text}", reply_markup=reply_markup)
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")



async def cleanup(application, send_messages_task):
    application.stop()
    send_messages_task.cancel()
    await asyncio.gather(
        application.run_until_complete(application.shutdown()),
        send_messages_task
    )

async def main_task():
    while True:
        # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º asyncio.ensure_future
        asyncio.ensure_future(time_until_event())
        await asyncio.sleep(sendTryTime)


def main() -> None:
    # global send_messages_task
    """Run the bot."""
    # Create the Application and pass it your bot's token.

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    
    # Create a new event loop
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É main_task —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏
    main_task_task = loop.create_task(main_task())

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Å–æ–∑–¥–∞–Ω–Ω–æ–º —Ü–∏–∫–ª–µ
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except KeyboardInterrupt:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
        loop.run_until_complete(cleanup(application, main_task_task))


if __name__ == "__main__":
    main()