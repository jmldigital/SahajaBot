#!/usr/bin/env python
# pylint: disable=unused-argument
# This program is dedicated to the public domain under the CC0 license.

"""
Simple Bot to reply to Telegram messages.

First, a few handler functions are defined. Then, those functions are passed to
the Application and registered at their respective places.
Then, the bot is started and runs until we press Ctrl-C on the command line.

Usage:
Basic Echobot example, repeats messages.
Press Ctrl-C on the command line or send a signal to the process to stop the
bot.
"""
# import gspread_asyncio
import asyncio
from concurrent.futures import ThreadPoolExecutor
import calendar
import time
from datetime import datetime, timedelta, time
import logging
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, Bot
from telegram.ext import Application, CallbackQueryHandler, CommandHandler, ContextTypes
import os


env_path = '.env'
# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ –∑–Ω–∞—á–µ–Ω–∏—è

send_messages_task = None

sendTryTime = 600*6
BigTimeLimit = [23,24]
ShortTimeLimit = [3,4]
# gif = open('gif.gif', 'rb')
agree_sticker_id = "CAACAgIAAxkBAAEKzbBlX1MfZJ6Dc4vZ-FX52TdIrpqePwACCREAAoHQiUufCV73RPDwKTME"
yoga_sticker_id = 'CAACAgIAAxkBAAEKzbdlX1Oj5EEa4YoLjhs5cJr8HSs5QAACbgAD5KDOByc3KCA4N217MwQ'
yoga_sticker_id_love = 'CAACAgIAAxkBAAEKzbllX1Ragq2eswe2NT_9NrrhP-4oNwACyQEAAhZCawpNVQGnEnEQ3jME'
yoga_sticker_id_by = 'CAACAgIAAxkBAAEKzbtlX1R84xZAptpCORxVlH1d4veXmgACWg8AAsFkiUtoBn1ASv7hiDME'


# –ß—Ç–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞ .env –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Ö –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
with open(env_path) as f:
    for line in f:
        key, value = line.strip().split('=', 1)
        os.environ[key] = value

group_id = os.getenv("GROUP_ID") 
GOOGLE_SHEETS_SPREADSHEET_ID = os.getenv("GOOGLE_SHEETS_SPREADSHEET_ID")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GOOGLE_SHEETS_API_CREDENTIALS_JSON = os.getenv("GOOGLE_SHEETS_API_CREDENTIALS_JSON")
bot = Bot(token=TELEGRAM_BOT_TOKEN)


events_schedule = {
    "Tuesday": {
        "–ó–∞–Ω—è—Ç–∏–µ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤": {
        "üïê": time(17, 30),
        "üìç": "–°—Ç—É–¥–∏—è –ô–æ–≥–∏ –û–ô–ô–û, —É–ª. –•–æ–ª—å–∑—É–Ω–æ–≤–∞, 38/7\n https://yandex.ru/maps/-/CDe-bHYN",
        "üßòüèª‚Äç‚ôÄÔ∏è": "–ü—Ä–∞–∫—Ç–∏–∫–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–∏"
        }
    },

    "Thursday": {
        "–ó–∞–Ω—è—Ç–∏–µ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤": {
        "üïê": time(17, 00),
        "üìç": "–¢–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ê–ù–î–≠–†, —É–ª. –ë–∞–∫—É–Ω–∏–Ω–∞, 2–ê, 2-–π —ç—Ç–∞–∂ \n https://yandex.ru/maps/-/CDe-bL~J",
        "üßòüèª‚Äç‚ôÄÔ∏è": "–ü—Ä–∞–∫—Ç–∏–∫–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–∏"
        }
    },

    "Friday": {
        "–ó–∞–Ω—è—Ç–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏—Ö": {
        "üïê": time(19, 0),
        "üìç": "–û—Ñ–∏—Å –≤–æ–∑–ª–µ –ì–∞–ª–µ—Ä–µ–∏ –ß–∏–∂–æ–≤–∞, —É–ª. –ù–∏–∫–∏—Ç–∏–Ω—Å–∫–∞—è, 42, 5-–π —ç—Ç–∞–∂ –æ—Ñ. 515 \n https://yandex.ru/maps/-/CDe-bTjS",
        "üßòüèª‚Äç‚ôÄÔ∏è": "–ü—Ä–∞–∫—Ç–∏–∫–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–∏, –º–µ—Ç–æ–¥–∏–∫–∏ –æ—á–∏—Å—Ç–∫–∏",
        }
    },

    "Monday": {
        "–ó–∞–Ω—è—Ç–∏–µ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤": {
        "üïê": time(15, 25),
        "üìç": "–û—Ñ–∏—Å, —É–ª. 20-–ª–µ—Ç–∏—è –û–∫—Ç—è–±—Ä—è, 59 –æ—Ñ.317, 3-–π —ç—Ç–∞–∂ \n https://yandex.ru/maps/-/CDe-b2ij",
        "üßòüèª‚Äç‚ôÄÔ∏è": "–ü—Ä–∞–∫—Ç–∏–∫–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–∏"
        },
        "–ó–∞–Ω—è—Ç–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏—Ö": {
        "üïê": time(14, 25),
        "üìç": "–û—Ñ–∏—Å, —É–ª. 20-–ª–µ—Ç–∏—è –û–∫—Ç—è–±—Ä—è, 59 –æ—Ñ.317, 3-–π —ç—Ç–∞–∂ \n https://yandex.ru/maps/-/CDe-b2ij",
        "üßòüèª‚Äç‚ôÄÔ∏è": "–ü—Ä–∞–∫—Ç–∏–∫–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–∏, –º–µ—Ç–æ–¥–∏–∫–∏ –æ—á–∏—Å—Ç–∫–∏",
        }
        # "–ó–∞–Ω—è—Ç–∏–µ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤": {
        # "üïê": time(15, 35),
        # "üìç": "–û—Ñ–∏—Å, —É–ª. 20-–ª–µ—Ç–∏—è –û–∫—Ç—è–±—Ä—è, 59 –æ—Ñ.317, 3-–π —ç—Ç–∞–∂ \n https://yandex.ru/maps/-/CDe-b2ij",
        # "üßòüèª‚Äç‚ôÄÔ∏è": "–ü—Ä–∞–∫—Ç–∏–∫–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–∏, –º–µ—Ç–æ–¥–∏–∫–∏ –æ—á–∏—Å—Ç–∫–∏",
        # }

    }

}

def format_events_schedule(events_schedule):
    result = ""
    for day, events in events_schedule.items():
        result += f"{translate_days_to_russian(day)}:\n"
        for event_name, event_details in events.items():
            result += f"  {event_name}:\n"
            for key, value in event_details.items():
                if isinstance(value, time):
                    formatted_time = value.strftime("%H:%M")
                    result += f"    {key}: {formatted_time}\n"
                else:
                    result += f"    {key}: {value}\n"
        result += "\n"
    return result



def translate_days_to_russian(english_day):
    days_translation = {
        'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
        'Wednesday': '–°—Ä–µ–¥–∞',
        'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
        'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
        'Saturday': '–°—É–±–±–æ—Ç–∞',
        'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }

    return days_translation.get(english_day, english_day)


def get_day_index(day_name):
    days_of_week = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]

    try:
        day_index = days_of_week.index(day_name)
        return day_index
    except ValueError:
        print(f"–û—à–∏–±–∫–∞: {day_name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–Ω—ë–º –Ω–µ–¥–µ–ª–∏.")
        return None



async def time_until_event(sent=True):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    current_time = datetime.now()
    # day_of_week_index = current_time.weekday()
    near_opis =''
    near_geo =''
    near_title = ''
    nearest_time_delta = float('inf')
    # –†–∞—Å—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    for day, events in events_schedule.items():
        for event_name, event_info in events.items():
            event_time = event_info.get("üïê")

            # –í—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            event_datetime = datetime.combine((current_time + timedelta(days=(get_day_index(day) - current_time.weekday() + 7) % 7)).date(), event_time)
            # event_datetime = event_datetime.total_seconds() / 3600
            print('–≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',type(event_datetime))
            # –†–∞—Å—Å—á–µ—Ç —Ä–∞–∑–Ω–∏—Ü—ã –≤–æ –≤—Ä–µ–º–µ–Ω–∏
            time_difference = (event_datetime - current_time).total_seconds() / 3600
            print('—Å–µ–π—á–∞—Å-',current_time, '-time_difference',time_difference )

            #–ü–æ–ª—É—á–∞–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
            if time_difference  < nearest_time_delta and time_difference >= ShortTimeLimit[1]:
                nearest_time_delta = time_difference
                near_title ="üöÄ "+ event_name
                near_day = "üóì " + translate_days_to_russian(day) + " üïê"+ str(event_time)
                near_geo = "üìç "+ event_info.get("üìç")
                near_opis = "üßòüèª‚Äç‚ôÄÔ∏è "+ event_info.get("üßòüèª‚Äç‚ôÄÔ∏è")

                # nearest_output_string = near_title + '\n'+ "üóì "+ translate_days_to_russian(day) + str(near_time) + '\n'+ near_geo + '\n' + near_opis
            if sent==True:
                if time_difference //1 == BigTimeLimit[1]:
                    await send_messages_to_users(near_title,near_day,near_geo,near_opis)
                if time_difference //1 == ShortTimeLimit[1]:
                    await send_reminder_to_users(near_title,near_day,near_geo,near_opis)
            else:
                pass

    print('–±–ª–∏–∂–∞–π—à–∞—è –¥–µ–ª—å—Ç–∞',nearest_time_delta,'–±–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å',near_day,'–±–ª–∏–∂–∞–π—à–µ–µ –∑–∞–Ω—è—Ç–∏–µ',near_title)
    return near_title,near_day,near_geo,near_opis






# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
# set higher logging level for httpx to avoid all GET and POST requests being logged
logging.getLogger("httpx").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)


keyboard = [
    [
        InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="yes"),
        InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="shelude")
    ]
]

keyboard2 = [
    [
        InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="shelude"),
        InlineKeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="otpis"),
    ]

]

keyboard22 = [
    [
        InlineKeyboardButton("–ü–æ–π–¥—É –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ", callback_data="try"),
        InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="shelude"),
    ],
        [InlineKeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="otpis")]
]

keyboard3 = [
    [
        InlineKeyboardButton("–¢–æ—á–Ω–æ –ø–æ–π–¥—É", callback_data="confirm"),
        InlineKeyboardButton("–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è", callback_data="sorry"),
    ],
    [
        InlineKeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="otpis"),
    ]
]

# Define a few command handlers. These usually take the two arguments update and
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Sends a message with three inline buttons attached."""

    user_ids,filtered_users = await get_telegram_user_ids()
    curent_user_id = update.message.chat_id  # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ –æ–±—ä–µ–∫—Ç–∞ update

    if str(curent_user_id) in user_ids:
        reply_markup = InlineKeyboardMarkup(keyboard2)
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –°–∞—Ö–∞–¥–∂ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –í–æ—Ä–æ–Ω–µ–∂–µ, —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è?", reply_markup=reply_markup)
    else:
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text('''–ü—Ä–∏–≤–µ—Ç! –º—ã –°–∞—Ö–∞–¥–∂–∞ –ô–æ–≥–∏ –≥–æ—Ä–æ–¥–∞ –í–æ—Ä–æ–Ω–µ–∂ —Å–¥–µ–ª–∞–ª–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–Ω–∏—Ç—å –≤—Å–µ–º –∂–µ–ª–∞—é—â–∏–º –≥–¥–µ –∏ –∫–æ–≥–¥–∞ –ø—Ä–æ—Ö–æ–¥—è—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ –°–∞—Ö–∞–¥–∂-–º–µ–¥–∏—Ç–∞—Ü–∏–∏. 

–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –∏ –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞ –¥–æ –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –≥–¥–µ –∏ –≤–æ —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –±–ª–∏–∂–∞–π—à–µ–µ –∑–∞–Ω—è—Ç–∏–µ, —á—Ç–æ–±—ã –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏. –í—ã —Ç–∞–∫ –∂–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá.''', reply_markup=reply_markup)
    

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Parses the CallbackQuery and updates the message text."""
    query = update.callback_query
    user_id = query.from_user.id
    user_ids,filtered_users = await get_telegram_user_ids()
    user_name = query.from_user.username
    choice = query.data


    # CallbackQueries need to be answered, even if no notification to the user is needed
    await query.answer()

    # –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google –¢–∞–±–ª–∏—Ü—É
    if choice == "yes":
        if str(user_id) in user_ids:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
            )
        else:
            near_title,near_day,near_geo,near_opis = await time_until_event(sent=False)
            await update_spreadsheet(user_id, user_name,  GOOGLE_SHEETS_SPREADSHEET_ID, choice==False, confirmation=False ,typeOf=True)
            await update_spreadsheet_data(context.application)    
            await context.bot.send_message(
                chat_id=user_id,
                text=f'''–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å! –ú—ã –±—É–¥–µ–º –í–∞—Å —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–Ω—è—Ç–∏—è—Ö –ø–æ –º–µ–¥–∏—Ç–∞—Ü–∏–∏, —á—Ç–æ –±—ã –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏. 
                
–ë–ª–∏–∂–∞–π—à–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: 

{near_title} \n{near_day} \n{near_geo}.''' ,
            )
            await context.bot.send_sticker(chat_id=user_id, sticker=agree_sticker_id )



    if choice == "otpis":
        await update_spreadsheet(user_id, user_name, GOOGLE_SHEETS_SPREADSHEET_ID, choice=False, confirmation=False, typeOf=False)
        await update_spreadsheet_data(context.application)    
        await context.bot.send_message(
            chat_id=user_id,
            text=f"–ú—ã –≤–∞—Å —É–¥–∞–ª–∏–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=InlineKeyboardMarkup(keyboard)
        )
        await context.bot.send_sticker(chat_id=user_id, sticker=yoga_sticker_id_by)
    
    if choice == "try":
        near_title,near_day,near_geo,near_opis = await time_until_event(sent=False)
        await update_spreadsheet(user_id, user_name,  GOOGLE_SHEETS_SPREADSHEET_ID, choice=True, confirmation=False, typeOf=False)
        await update_spreadsheet(user_id, user_name,  GOOGLE_SHEETS_SPREADSHEET_ID, choice=True, confirmation=False, typeOf=True)
        await update_spreadsheet_data(context.application)    
        await context.bot.send_message(
            chat_id=user_id,
            text=f"–ó–¥–æ—Ä–æ–≤–æ! –ë—É–¥–µ–º –∂–¥–∞—Ç—å –≤–∞—Å –∑–∞–≤—Ç—Ä–∞ –≤ \n{near_day} –ø–æ –∞–¥—Ä–µ—Å—É \n{near_geo}. \n‚è∞ –û—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ {ShortTimeLimit[1]} —á–∞—Å–∞ –¥–æ –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏–π"
        )
        await send_notifications_to_group_try(user_name)
        await context.bot.send_sticker(chat_id=user_id, sticker=yoga_sticker_id_love)
    
    if choice == "confirm":
        near_title,near_day,near_geo,near_opis = await time_until_event(sent=False)
        time = near_day[1:]
        await update_spreadsheet(user_id, user_name,  GOOGLE_SHEETS_SPREADSHEET_ID, choice=True, confirmation=False, typeOf=False)
        await update_spreadsheet(user_id, user_name,  GOOGLE_SHEETS_SPREADSHEET_ID, choice=True, confirmation=True, typeOf=True)
        await update_spreadsheet_data(context.application)    
        await context.bot.send_message(
            chat_id=user_id,
            text=f"–í–∞—à–∞ –ö—É–Ω–¥–∞–ª–∏–Ω–∏ –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è, —É–≤–∏–¥–∏–º—Å—è –≤ {near_geo} –≤ üïê{time}",
        )
        await send_notifications_to_group_confirm(user_name)
        await context.bot.send_sticker(chat_id=user_id, sticker=yoga_sticker_id)

    if choice == "sorry":
        await update_spreadsheet(user_id, user_name,  GOOGLE_SHEETS_SPREADSHEET_ID, choice=True, confirmation=False, typeOf=False)
        await update_spreadsheet(user_id, user_name,  GOOGLE_SHEETS_SPREADSHEET_ID, choice=False, confirmation=False, typeOf=True)
        await update_spreadsheet_data(context.application)    
        await context.bot.send_message(
            chat_id=user_id,
            text=f"–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ, –º—ã –í–∞—Å –æ–ø–æ–≤–µ—Å—Ç–∏–º –æ –Ω–µ–º –∑–∞—Ä–∞–Ω–µ–µ!"
        )
        await send_notifications_to_group_sorry(user_name)

    if choice == "shelude": 
        await context.bot.send_message(
            chat_id=user_id,
            text=format_events_schedule(events_schedule)
        )


async def send_notifications_to_group_try(user_name):
    near_title,near_day,near_geo,near_opis = await time_until_event(sent=False)
    await bot.send_message(group_id, f"\n –ù–∞ {near_day} \n –µ—Å—Ç—å –ø–µ—Ä–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –æ—Ç {user_name}")

async def send_notifications_to_group_confirm(user_name):
    near_title,near_day,near_geo,near_opis = await time_until_event(sent=False)
    await bot.send_message(group_id, f"\n –ù–∞ {near_day} \n –µ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –æ—Ç {user_name}")

async def send_notifications_to_group_sorry(user_name):
    near_title,near_day,near_geo,near_opis = await time_until_event(sent=False)
    await bot.send_message(group_id, f"\n –ù–∞ {near_day} \n {user_name} –Ω–µ —Å–º–æ–∂–µ—Ç –ø—Ä–∏–¥—Ç–∏")


async def update_spreadsheet_data(application):
    # global send_messages_task
    await get_telegram_user_ids()


# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
async def update_spreadsheet(user_id, user_name,  GOOGLE_SHEETS_SPREADSHEET_ID, choice, confirmation, typeOf):
    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Google Sheets
    scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
    credentials = ServiceAccountCredentials.from_json_keyfile_name(GOOGLE_SHEETS_API_CREDENTIALS_JSON, scope)
    gc = gspread.authorize(credentials)
    spreadsheet = gc.open_by_key(GOOGLE_SHEETS_SPREADSHEET_ID)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ (–ø–µ—Ä–≤–æ–≥–æ –ª–∏—Å—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ)
    sheet = spreadsheet.get_worksheet(0)
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –í—ã–±–∏—Ä–∞–µ–º –ª–∏—Å—Ç —Ç–∞–±–ª–∏—Ü—ã
    row_data = [user_id, user_name, choice, confirmation, timestamp]

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if typeOf:
        sheet.append_row(row_data)
    else:
        cell = sheet.find(str(user_id))
        sheet.delete_row(cell.row)




# –ü–æ–ª—É—á–∞–µ–º —Å–æ–≥–ª–∞—Å–∏–≤—à–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
async def get_telegram_user_ids():
    # –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

    scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
    credentials = ServiceAccountCredentials.from_json_keyfile_name(GOOGLE_SHEETS_API_CREDENTIALS_JSON, scope)
    gc = gspread.authorize(credentials)
    spreadsheet = gc.open_by_key(GOOGLE_SHEETS_SPREADSHEET_ID)

    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
    gc = gspread.authorize(credentials)
    spreadsheet = gc.open_by_key(GOOGLE_SHEETS_SPREADSHEET_ID)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ (–ø–µ—Ä–≤–æ–≥–æ –ª–∏—Å—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ)
    sheet = spreadsheet.get_worksheet(0)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_ids = await asyncio.to_thread(sheet.col_values, 1)
    user_agrees = await asyncio.to_thread(sheet.col_values, 3)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, —É –∫–æ–≥–æ 3-–∏–π —Å—Ç–æ–ª–±–µ—Ü —Ä–∞–≤–µ–Ω True
    filtered_users = [user_id for user_id, agrees in zip(user_ids, user_agrees) if agrees.lower() == 'true']

    return user_ids,filtered_users


async def send_messages_to_users(near_title,near_day,near_geo,near_opis):
    # hours, minutes, eng_day, nearest_day = find_nearest_day(day_of_week_index)
    reply_markup = InlineKeyboardMarkup(keyboard22)

    try:
        user_ids,filtered_users = await get_telegram_user_ids()
        print("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞")
        for user_id in user_ids:
            # Send the reminder message
            await bot.send_message(user_id, f"\n –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: \n{near_day} \n{near_title}, \n{near_geo}, \n{near_opis} \n‚ö†Ô∏è –ï—Å–ª–∏ –≤—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø—Ä–∏–¥—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É - –ü–æ–π–¥—É –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ üëá ", reply_markup=reply_markup)
            # await bot.send_message(user_id, f"\n –ù–∞–ø–æ–º–∏–Ω–∞–µ–º." , reply_markup=reply_markup)
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")



async def send_reminder_to_users(near_title,near_day,near_geo,near_opis):
    reply_markup = InlineKeyboardMarkup(keyboard3)

    try:
        user_ids,filtered_users = await get_telegram_user_ids()
        print('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 4 —á–∞—Å–∞')
        for user_id in user_ids:
            # Send the reminder message
            await bot.send_message(user_id, f"\n –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —Å–µ–≥–æ–¥–Ω—è, —á–µ—Ä–µ–∑ {ShortTimeLimit[1]} —á–∞—Å–∞ –Ω–∞—á–Ω—É—Ç—å—Å—è –∑–∞–Ω—è—Ç–∏—è \n {near_day} \n {near_title}, \n {near_geo}, \n {near_opis}", reply_markup=reply_markup)
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")



async def cleanup(application, send_messages_task):
    application.stop()
    send_messages_task.cancel()
    await asyncio.gather(
        application.run_until_complete(application.shutdown()),
        send_messages_task
    )

async def main_task():
    while True:
        # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º asyncio.ensure_future
        asyncio.ensure_future(time_until_event(sent=True))
        await asyncio.sleep(sendTryTime)


def main() -> None:
    # global send_messages_task
    """Run the bot."""
    # Create the Application and pass it your bot's token.

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    
    # Create a new event loop
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É main_task —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏
    main_task_task = loop.create_task(main_task())

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Å–æ–∑–¥–∞–Ω–Ω–æ–º —Ü–∏–∫–ª–µ
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except KeyboardInterrupt:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
        loop.run_until_complete(cleanup(application, main_task_task))


if __name__ == "__main__":
    main()